{"ast":null,"code":"var _excluded = [\"children\", \"className\", \"forceRender\", \"id\", \"selected\", \"selectedClassName\"];\n\nfunction _objectWithoutPropertiesLoose(source, excluded) {\n  if (source == null) return {};\n  var target = {};\n  var sourceKeys = Object.keys(source);\n  var key, i;\n\n  for (i = 0; i < sourceKeys.length; i++) {\n    key = sourceKeys[i];\n    if (excluded.indexOf(key) >= 0) continue;\n    target[key] = source[key];\n  }\n\n  return target;\n}\n\nimport PropTypes from \"prop-types\";\nimport React from \"react\";\nimport cx from \"clsx\";\nvar DEFAULT_CLASS = \"react-tabs__tab-panel\";\nvar defaultProps = {\n  className: DEFAULT_CLASS,\n  forceRender: false,\n  selectedClassName: DEFAULT_CLASS + \"--selected\"\n};\nvar propTypes = process.env.NODE_ENV !== \"production\" ? {\n  children: PropTypes.node,\n  className: PropTypes.oneOfType([PropTypes.string, PropTypes.array, PropTypes.object]),\n  forceRender: PropTypes.bool,\n  id: PropTypes.string,\n  selected: PropTypes.bool,\n  selectedClassName: PropTypes.string\n} : {};\n\nvar TabPanel = function TabPanel(props) {\n  var _cx;\n\n  var children = props.children,\n      className = props.className,\n      forceRender = props.forceRender,\n      id = props.id,\n      selected = props.selected,\n      selectedClassName = props.selectedClassName,\n      attributes = _objectWithoutPropertiesLoose(props, _excluded);\n\n  return React.createElement(\"div\", Object.assign({}, attributes, {\n    className: cx(className, (_cx = {}, _cx[selectedClassName] = selected, _cx)),\n    role: \"tabpanel\",\n    id: \"panel\" + id,\n    \"aria-labelledby\": \"tab\" + id\n  }), forceRender || selected ? children : null);\n};\n\nTabPanel.tabsRole = \"TabPanel\";\nTabPanel.propTypes = process.env.NODE_ENV !== \"production\" ? propTypes : {};\nTabPanel.defaultProps = defaultProps;\nexport default TabPanel;","map":null,"metadata":{},"sourceType":"module"}